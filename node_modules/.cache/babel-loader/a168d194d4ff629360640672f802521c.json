{"ast":null,"code":"var _jsxFileName = \"/Users/byeonseongjin/Documents/studyProject/2020_leagueProject/frontEnd/league-app/src/components/GetEnglishData.jsx\";\nimport React, { Component } from 'react';\nimport { Icon, Label, Menu, Table } from 'semantic-ui-react';\nconst style = React.createElement(\"link\", {\n  rel: \"stylesheet\",\n  href: \"https://cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 4\n  },\n  __self: this\n});\n\nclass GetEnglishData extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/todos/') //     .then(res => res.json())\n    //     .then(\n    //         (result) => {\n    //             this.setState({\n    //                 isLoaded: true,\n    //                 items: result\n    //             });\n    //         },\n    //         (error) => {\n    //             this.setState({\n    //                 isLoaded: true,\n    //                 error\n    //             });\n    //         }\n    //     )\n    // fetch('http://localhost:8080/england/1')\n    // fetch('http://vagrant-test.local.com:8080/england/1')\n    .then(res => res.json()).then(result => {\n      this.setState({\n        isLoaded: true,\n        items: result\n      });\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          error = _this$state.error,\n          isLoaded = _this$state.isLoaded,\n          items = _this$state.items;\n    console.log('result', items);\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Error: \", error.message);\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Loading...\");\n    } else {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, style, React.createElement(Table, {\n        celled: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(Table.Header, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Team id\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"Team name\"), React.createElement(Table.HeaderCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Score\"))), React.createElement(Table.Body, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, React.createElement(Table.Row, {\n        key: items.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, items.teamId), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, items.title), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, items.completed)))));\n    }\n  }\n\n}\n\nexport default GetEnglishData;","map":{"version":3,"sources":["/Users/byeonseongjin/Documents/studyProject/2020_leagueProject/frontEnd/league-app/src/components/GetEnglishData.jsx"],"names":["React","Component","Icon","Label","Menu","Table","style","GetEnglishData","constructor","props","state","error","isLoaded","items","componentDidMount","fetch","then","res","json","result","setState","render","console","log","message","id","teamId","title","completed"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,IAAR,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,QAAuC,mBAAvC;AAEA,MAAMC,KAAK,GAAG;AAAM,EAAA,GAAG,EAAC,YAAV;AAAuB,EAAA,IAAI,EAAC,sEAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAd;;AAEA,MAAMC,cAAN,SAA6BN,SAA7B,CAAuC;AACnCO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,KAAK,EAAE,IADE;AAETC,MAAAA,QAAQ,EAAE,KAFD;AAGTC,MAAAA,KAAK,EAAE;AAHE,KAAb;AAKH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,KAAK,CAAC,6CAAD,CAAL,CACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEI;AACA;AAnBJ,KAoBKC,IApBL,CAoBUC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EApBjB,EAqBKF,IArBL,CAsBSG,MAAD,IAAY;AACR,WAAKC,QAAL,CAAc;AACVR,QAAAA,QAAQ,EAAE,IADA;AAEVC,QAAAA,KAAK,EAAEM;AAFG,OAAd;AAKH,KA5BT,EA6BSR,KAAD,IAAW;AACP,WAAKS,QAAL,CAAc;AACVR,QAAAA,QAAQ,EAAE,IADA;AAEVD,QAAAA;AAFU,OAAd;AAIH,KAlCT;AAoCH;;AAEDU,EAAAA,MAAM,GAAG;AAAA,wBAC8B,KAAKX,KADnC;AAAA,UACGC,KADH,eACGA,KADH;AAAA,UACUC,QADV,eACUA,QADV;AAAA,UACoBC,KADpB,eACoBA,KADpB;AAELS,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBV,KAAtB;;AAIA,QAAIF,KAAJ,EAAW;AACP,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAaA,KAAK,CAACa,OAAnB,CAAP;AACH,KAFD,MAEO,IAAI,CAACZ,QAAL,EAAe;AAClB,aAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACH,KAFM,MAEA;AACH,aACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACKN,KADL,EAGI,oBAAC,KAAD;AAAO,QAAA,MAAM,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,EAEI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFJ,EAGI,oBAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHJ,CADJ,CADJ,EASI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAmBY,oBAAC,KAAD,CAAO,GAAP;AAAW,QAAA,GAAG,EAAEO,KAAK,CAACY,EAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAaZ,KAAK,CAACa,MAAnB,CADJ,EAEI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAab,KAAK,CAACc,KAAnB,CAFJ,EAGI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAad,KAAK,CAACe,SAAnB,CAHJ,CAnBZ,CATJ,CAHJ,CADJ;AA4CH;AACJ;;AAzGkC;;AA4GvC,eAAerB,cAAf","sourcesContent":["import React, { Component } from 'react';\nimport {Icon, Label, Menu, Table} from 'semantic-ui-react';\n\nconst style = <link rel='stylesheet' href='https://cdn.jsdelivr.net/npm/semantic-ui@2.4.1/dist/semantic.min.css' />\n\nclass GetEnglishData extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            error: null,\n            isLoaded: false,\n            items: []\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/todos/')\n        //     .then(res => res.json())\n        //     .then(\n        //         (result) => {\n        //             this.setState({\n        //                 isLoaded: true,\n        //                 items: result\n        //             });\n\n        //         },\n        //         (error) => {\n        //             this.setState({\n        //                 isLoaded: true,\n        //                 error\n        //             });\n        //         }\n        //     )\n\n            // fetch('http://localhost:8080/england/1')\n            // fetch('http://vagrant-test.local.com:8080/england/1')\n            .then(res => res.json())\n            .then(\n                (result) => {\n                    this.setState({\n                        isLoaded: true,\n                        items: result\n                    });\n\n                },\n                (error) => {\n                    this.setState({\n                        isLoaded: true,\n                        error\n                    });\n                }\n            )\n    }\n\n    render() {\n        const { error, isLoaded, items } = this.state;\n        console.log('result', items);\n\n\n\n        if (error) {\n            return <div>Error: {error.message}</div>\n        } else if (!isLoaded) {\n            return <div>Loading...</div>;\n        } else {\n            return (\n                <div>\n                    {style}\n\n                    <Table celled>\n                        <Table.Header>\n                            <Table.Row>\n                                <Table.HeaderCell>Team id</Table.HeaderCell>\n                                <Table.HeaderCell>Team name</Table.HeaderCell>\n                                <Table.HeaderCell>Score</Table.HeaderCell>\n                            </Table.Row>\n                        </Table.Header>\n\n                        <Table.Body>\n                            {/* {items.map(row => {\n                                return (\n                                    <Table.Row key={row.teamId}>\n                                        <Table.Cell>{row.teamId}</Table.Cell>\n                                        <Table.Cell>{row.teamName}</Table.Cell>\n                                        <Table.Cell>{row.teamScore}</Table.Cell>\n                                    </Table.Row>\n                                );\n\n                            })} */}\n\n                            \n                                    {/* <Table.Row key={items.teamId}>\n                                        <Table.Cell>{items.teamId}</Table.Cell>\n                                        <Table.Cell>{items.teamName}</Table.Cell>\n                                        <Table.Cell>{items.teamScore}</Table.Cell>\n                                    </Table.Row> */}\n\n                                    <Table.Row key={items.id}>\n                                        <Table.Cell>{items.teamId}</Table.Cell>\n                                        <Table.Cell>{items.title}</Table.Cell>\n                                        <Table.Cell>{items.completed}</Table.Cell>\n                                    </Table.Row>\n                               \n                        </Table.Body>\n                    </Table>\n                </div>\n\n\n            );\n        }\n    }\n}\n\nexport default GetEnglishData;"]},"metadata":{},"sourceType":"module"}